#include "max-flow.hpp"

#include <boost/config.hpp>
#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/push_relabel_max_flow.hpp>
#include <boost/graph/read_dimacs.hpp>

using namespace boost;

MaxFlow::MaxFlow(Edge edges[], long source, long sink)
{
	// property_map<Graph, edge_capacity_t>::type capacity					  = get(edge_capacity, G);
	// property_map<Graph, edge_reverse_t>::type rev						  = get(edge_reverse, G);
	// property_map<Graph, edge_residual_capacity_t>::type residual_capacity = get(edge_residual_capacity, G);

	// read_dimacs_max_flow(g, capacity, rev, s, t);

	// flow = push_relabel_max_flow(g, s, t);

	// std::cout << "c  The total flow:" << std::endl;
	// std::cout << "s " << flow << std::endl
	// 		  << std::endl;

	// std::cout << "c flow values:" << std::endl;
	// graph_traits<Graph>::vertex_iterator u_iter, u_end;
	// graph_traits<Graph>::out_edge_iterator ei, e_end;
	// for (boost::tie(u_iter, u_end) = vertices(g); u_iter != u_end; ++u_iter)
	// 	for (boost::tie(ei, e_end) = out_edges(*u_iter, g); ei != e_end; ++ei)
	// 		if (capacity[*ei] > 0)
	// 			std::cout << "f " << *u_iter << " " << target(*ei, g) << " "
	// 					  << (capacity[*ei] - residual_capacity[*ei]) << std::endl;

}

MaxFlow::~MaxFlow()
{
}

long MaxFlow::flow()
{
	// return push_relabel_max_flow(G, source, sink);
	
	Graph g;
	long flow;

	property_map<Graph, edge_capacity_t>::type
		capacity = get(edge_capacity, g);
	property_map<Graph, edge_reverse_t>::type
		rev = get(edge_reverse, g);
	property_map<Graph, edge_residual_capacity_t>::type
		residual_capacity = get(edge_residual_capacity, g);

	Traits::vertex_descriptor s, t;
	
	std::string input = 
R"(c This file was generated by genrmf.
c The parameters are: a: 2 b: 2 c1: 1 c2: 5
p max       8         20
n       1 s
n       8 t
a       1       7          3
a       1       2         20
a       1       3         20
a       2       6          1
a       2       1         20
a       2       4         20
a       3       5          4
a       3       4         20
a       3       1         20
a       4       8          5
a       4       3         20
a       4       2         20
a       5       6         20
a       5       7         20
a       6       5         20
a       6       8         20
a       7       8         20
a       7       5         20
a       8       7         20
a       8       6         20
)";
	std::istringstream str(input);
	
	read_dimacs_max_flow(g, capacity, rev, s, t, str);

	flow = push_relabel_max_flow(g, s, t);

	std::cout << "c  The total flow:" << std::endl;
	std::cout << "s " << flow << std::endl
			  << std::endl;

	std::cout << "c flow values:" << std::endl;
	graph_traits<Graph>::vertex_iterator u_iter, u_end;
	graph_traits<Graph>::out_edge_iterator ei, e_end;
	for (boost::tie(u_iter, u_end) = vertices(g); u_iter != u_end; ++u_iter)
		for (boost::tie(ei, e_end) = out_edges(*u_iter, g); ei != e_end; ++ei)
			if (capacity[*ei] > 0)
				std::cout << "f " << *u_iter << " " << target(*ei, g) << " "
						  << (capacity[*ei] - residual_capacity[*ei]) << std::endl;
	return 0;

}
